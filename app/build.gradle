plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'dagger.hilt.android.plugin'
    id 'de.mannodermaus.android-junit5'
}

android {
    compileSdkVersion rootProject.compile_sdk_version
    buildToolsVersion rootProject.build_tools_version

    defaultConfig {
        applicationId "org.emunix.insteadlauncher"
        minSdkVersion rootProject.min_sdk_version
        targetSdkVersion rootProject.compile_sdk_version
        versionCode rootProject.version_code
        versionName rootProject.version_name
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    ndkVersion rootProject.ndk_version
    signingConfigs {
        release
    }
    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField("String", "INSTEAD_VERSION", "\"$rootProject.build_config_instead_version\"")
        }
        debug {
            applicationIdSuffix ".debug"
            versionNameSuffix '-DEBUG'
            buildConfigField("String", "INSTEAD_VERSION", "\"$rootProject.build_config_instead_version\"")
        }
    }
    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
        androidTest.java.srcDirs += 'src/androidTest/kotlin'
        test.java.srcDirs += 'src/test/kotlin'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = "17"
    }
    buildFeatures {
        viewBinding true
    }
    lint {
        abortOnError false
    }
    namespace 'org.emunix.insteadlauncher'
}

Properties props = new Properties()
def propFile = rootProject.file("keystore.properties")
if (propFile.canRead()) {
    props.load(new FileInputStream(propFile))

    if (props != null && props.containsKey('storeFile') && props.containsKey('storePassword') &&
            props.containsKey('keyAlias') && props.containsKey('keyPassword')) {

        println 'Release build signing'

        android.signingConfigs.release.storeFile = file(props['storeFile'])
        android.signingConfigs.release.storePassword = props['storePassword']
        android.signingConfigs.release.keyAlias = props['keyAlias']
        android.signingConfigs.release.keyPassword = props['keyPassword']
    } else {
        println 'Release build not found signing properties'

        android.buildTypes.release.signingConfig = null
    }
} else {
    println 'Release build not found signing file'
    android.buildTypes.release.signingConfig = null
}

dependencies {
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    androidTestImplementation('androidx.test.espresso:espresso-core:3.5.1', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    testImplementation "org.junit.jupiter:junit-jupiter-api:$rootProject.junit_version"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$rootProject.junit_version"

    implementation project(':core-storage')
    implementation project(':core-preferences')
    implementation project(':instead')

    // Support libraries
    implementation "androidx.appcompat:appcompat:$rootProject.appcompat_version"
    implementation 'com.google.android.material:material:1.9.0'
    implementation 'androidx.fragment:fragment-ktx:1.6.0'
    implementation "androidx.preference:preference-ktx:$rootProject.preference_ktx_version"
    implementation 'androidx.recyclerview:recyclerview:1.3.0'
    implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'

    // Architecture components
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$rootProject.lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$rootProject.lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-common-java8:$rootProject.lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-extensions:2.2.0"

    // Room
    implementation "androidx.room:room-runtime:$rootProject.room_version"
    kapt "androidx.room:room-compiler:$rootProject.room_version"

    // Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$rootProject.kotlin_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$rootProject.kotlin_coroutines_version"

    // Navigation
    implementation "androidx.navigation:navigation-fragment-ktx:$rootProject.navigation_version"
    implementation "androidx.navigation:navigation-ui-ktx:$rootProject.navigation_version"

    // WorkManager
    implementation 'androidx.work:work-runtime-ktx:2.8.1'

    // RxJava
    implementation 'io.reactivex.rxjava3:rxandroid:3.0.2'
    implementation 'io.reactivex.rxjava3:rxjava:3.1.6'

    // Network
    implementation 'com.squareup.okhttp3:okhttp:5.0.0-alpha.11'
    implementation 'io.coil-kt:coil:2.4.0'

    // DI
    implementation "com.google.dagger:hilt-android:$rootProject.hilt_version"
    kapt "com.google.dagger:hilt-android-compiler:$rootProject.hilt_version"
    implementation "androidx.hilt:hilt-work:1.0.0"
    kapt("androidx.hilt:hilt-compiler:1.0.0")

    // Files
    implementation "commons-io:commons-io:$rootProject.commons_io_version"

    // Crash reports
    implementation "ch.acra:acra-mail:$rootProject.acraVersion"
    implementation "ch.acra:acra-notification:$rootProject.acraVersion"

    // Logging
    implementation 'com.jakewharton.timber:timber:5.0.1'

    // ViewBinding Delegate
    implementation 'com.github.kirich1409:viewbindingpropertydelegate-noreflection:1.5.9'

    // LeakCanary
    //debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.6'
}

repositories {
    mavenCentral()
}

