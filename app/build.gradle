plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'dagger.hilt.android.plugin'
    id 'com.google.devtools.ksp'
    id 'de.mannodermaus.android-junit5'
    alias libs.plugins.compose.compiler
}

android {
    defaultConfig {
        applicationId "org.emunix.insteadlauncher"
        minSdkVersion rootProject.min_sdk_version
        compileSdk rootProject.compile_sdk_version
        targetSdkVersion rootProject.compile_sdk_version
        versionCode rootProject.version_code
        versionName rootProject.version_name
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    ndkVersion rootProject.ndk_version
    signingConfigs {
        release
    }
    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField("String", "INSTEAD_VERSION", "\"$rootProject.build_config_instead_version\"")
        }
        debug {
            applicationIdSuffix ".debug"
            versionNameSuffix '-DEBUG'
            buildConfigField("String", "INSTEAD_VERSION", "\"$rootProject.build_config_instead_version\"")
        }
    }
    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
        androidTest.java.srcDirs += 'src/androidTest/kotlin'
        test.java.srcDirs += 'src/test/kotlin'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = "17"
    }
    buildFeatures {
        compose true
        viewBinding true
    }
    lint {
        abortOnError false
    }
    namespace 'org.emunix.insteadlauncher'
}

Properties props = new Properties()
def propFile = rootProject.file("keystore.properties")
if (propFile.canRead()) {
    props.load(new FileInputStream(propFile))

    if (props != null && props.containsKey('storeFile') && props.containsKey('storePassword') &&
            props.containsKey('keyAlias') && props.containsKey('keyPassword')) {

        println 'Release build signing'

        android.signingConfigs.release.storeFile = file(props['storeFile'])
        android.signingConfigs.release.storePassword = props['storePassword']
        android.signingConfigs.release.keyAlias = props['keyAlias']
        android.signingConfigs.release.keyPassword = props['keyPassword']
    } else {
        println 'Release build not found signing properties'

        android.buildTypes.release.signingConfig = null
    }
} else {
    println 'Release build not found signing file'
    android.buildTypes.release.signingConfig = null
}

dependencies {
    implementation project(':core-storage')
    implementation project(':core-preferences')
    implementation project(':instead')

    // Support libraries
    implementation libs.androidx.appcompat
    implementation libs.material
    implementation libs.androidx.fragment.ktx
    implementation libs.androidx.preference.ktx
    implementation libs.androidx.recyclerview
    implementation libs.androidx.swiperefreshlayout
    implementation libs.androidx.constraintlayout
    implementation libs.androidx.legacy.support.v4

    // Compose
    implementation libs.androidx.material.icons.extended
    implementation libs.androidx.material3.android
    implementation libs.androidx.ui
    implementation libs.androidx.ui.tooling.preview
    debugImplementation libs.androidx.ui.tooling

    // Architecture components
    implementation libs.androidx.lifecycle.viewmodel.ktx
    implementation libs.androidx.lifecycle.common.java8
    implementation libs.androidx.lifecycle.extensions

    // Room
    implementation libs.androidx.room.runtime
    implementation libs.androidx.room.ktx
    ksp libs.androidx.room.compiler

    // Kotlin
    implementation libs.kotlin.stdlib
    implementation libs.kotlinx.coroutines.android

    // Navigation
    implementation libs.androidx.navigation.fragment.ktx
    implementation libs.androidx.navigation.ui.ktx

    // WorkManager
    implementation libs.androidx.work.runtime.ktx

    // Network
    implementation libs.okhttp
    implementation libs.coil

    // DI
    implementation libs.hilt.android
    kapt libs.hilt.compiler
    implementation libs.androidx.hilt.work
    kapt libs.androidx.hilt.compiler

    // Files
    implementation libs.commons.io

    // Crash reports
    implementation libs.acra.mail
    implementation libs.acra.notification

    // Logging
    implementation libs.timber

    // ViewBinding Delegate
    implementation libs.viewbindingpropertydelegate.noreflection

    // Test
    testImplementation libs.junit.jupiter.api
    testRuntimeOnly libs.junit.jupiter.engine
}

repositories {
    mavenCentral()
}

