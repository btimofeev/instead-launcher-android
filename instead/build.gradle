plugins {
    id 'com.android.library'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'dagger.hilt.android.plugin'
    id "de.undercouch.download" version "5.6.0"
}

android {

    defaultConfig {
        minSdkVersion rootProject.min_sdk_version
        compileSdk rootProject.compile_sdk_version
        targetSdkVersion rootProject.compile_sdk_version

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        ndk {
            abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
        }
        externalNativeBuild {
            cmake {
                cppFlags ""
                arguments "-DANDROID_PLATFORM=android-25", "-DCMAKE_BUILD_TYPE=Release",
                        "-DANDROID_ARM_MODE=arm"
                version "3.31.0"
            }
        }
        lintOptions {
          abortOnError false
        }

        consumerProguardFiles "consumer-rules.pro"
    }

    ndkVersion ndk_version

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField("String", "INSTEAD_VERSION", "\"$rootProject.build_config_instead_version\"")
            ndk {
                debugSymbolLevel = 'FULL'
            }
        }
        debug {
            buildConfigField("String", "INSTEAD_VERSION", "\"$rootProject.build_config_instead_version\"")
        }
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
        androidTest.java.srcDirs += 'src/androidTest/kotlin'
        test.java.srcDirs += 'src/test/kotlin'
    }

    externalNativeBuild {
        cmake {
            path "src/main/c/CMakeLists.txt"
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = '17'
    }
    namespace 'org.emunix.instead'
}

dependencies {
    implementation project(':core-storage')
    implementation project(':core-preferences')
    implementation project(':sdl-activity')

    implementation libs.androidx.appcompat

    // Kotlin
    implementation libs.kotlin.stdlib
    implementation libs.kotlinx.coroutines.android

    // DI
    implementation libs.hilt.android
    kapt libs.hilt.compiler
}

tasks.register('deleteDependencies', Delete) {
    delete 'src/main/c/Instead/Instead', 'src/main/c/Lua/Lua'
    delete 'src/main/c/SDL2/SDL2', 'src/main/c/SDL2_image/SDL2_image'
    delete 'src/main/c/SDL2_mixer/SDL2_mixer', 'src/main/c/SDL2_ttf/SDL2_ttf'
    delete 'src/main/c/libiconv/libiconv'
}

tasks.register('downloadDependencies') {
    dependsOn deleteDependencies
    def Instead = '3.5.2'
    def Lua = '5.1.5'
    def SDL2 = '2.0.22'
    def SDL2_image = '2.0.5'
    def SDL2_mixer = '2.0.4'
    def SDL2_ttf = '2.0.15'
    def Iconv = '1.15'
    def downloadDir = layout.buildDirectory.get().asFile.path

    doLast {
        download.run {
            src "https://github.com/instead-hub/instead/archive/${Instead}.tar.gz"
            dest new File(downloadDir, "instead-${Instead}.tar.gz")
        }
        copy {
            from tarTree(resources.gzip("${downloadDir}/instead-${Instead}.tar.gz"))
            into 'src/main/c/Instead/'
        }
        delete("${downloadDir}/instead-${Instead}.tar.gz")
        file("src/main/c/Instead/instead-${Instead}").renameTo(file('src/main/c/Instead/Instead'))
        delete("src/main/c/Instead/instead-${Instead}")
        delete("src/main/c/Instead/pax_global_header")

        download.run {
            src "https://www.lua.org/ftp/lua-${Lua}.tar.gz"
            dest downloadDir
        }
        copy {
            from tarTree(resources.gzip("${downloadDir}/lua-${Lua}.tar.gz"))
            into 'src/main/c/Lua/'
        }
        delete("${downloadDir}/lua-${Lua}.tar.gz")
        file("src/main/c/Lua/lua-${Lua}").renameTo(file('src/main/c/Lua/Lua'))
        delete("src/main/c/Lua/lua-${Lua}")

        download.run {
            src "https://github.com/libsdl-org/SDL/releases/download/release-${SDL2}/SDL2-${SDL2}.tar.gz"
            dest downloadDir
        }
        copy {
            from tarTree(resources.gzip("${downloadDir}/SDL2-${SDL2}.tar.gz"))
            into 'src/main/c/SDL2/'
        }
        delete("${downloadDir}/SDL2-${SDL2}.tar.gz")
        file("src/main/c/SDL2/SDL2-${SDL2}").renameTo(file('src/main/c/SDL2/SDL2'))
        delete("src/main/c/SDL2/SDL2-${SDL2}")

        download.run {
            src "https://github.com/libsdl-org/SDL_image/archive/refs/tags/release-${SDL2_image}.tar.gz"
            dest downloadDir
        }
        copy {
            from tarTree(resources.gzip("${downloadDir}/release-${SDL2_image}.tar.gz"))
            into 'src/main/c/SDL2_image/'
        }
        delete("${downloadDir}/release-${SDL2_image}.tar.gz")
        file("src/main/c/SDL2_image/SDL_image-release-${SDL2_image}").renameTo(file('src/main/c/SDL2_image/SDL2_image'))
        delete("src/main/c/SDL2_image/SDL2_image-${SDL2_image}")

        download.run {
            src "https://github.com/libsdl-org/SDL_mixer/archive/refs/tags/release-${SDL2_mixer}.tar.gz"
            dest downloadDir
        }
        copy {
            from tarTree(resources.gzip("${downloadDir}/release-${SDL2_mixer}.tar.gz"))
            into 'src/main/c/SDL2_mixer/'
        }
        delete("${downloadDir}/release-${SDL2_mixer}.tar.gz")
        file("src/main/c/SDL2_mixer/SDL_mixer-release-${SDL2_mixer}").renameTo(file('src/main/c/SDL2_mixer/SDL2_mixer'))
        delete("src/main/c/SDL2_mixer/SDL2_mixer-${SDL2_mixer}")

        download.run {
            src "https://github.com/libsdl-org/SDL_ttf/releases/download/release-${SDL2_ttf}/SDL2_ttf-${SDL2_ttf}.tar.gz"
            dest downloadDir
        }
        copy {
            from tarTree(resources.gzip("${downloadDir}/SDL2_ttf-${SDL2_ttf}.tar.gz"))
            into 'src/main/c/SDL2_ttf/'
        }
        delete("${downloadDir}/SDL2_ttf-${SDL2_ttf}.tar.gz")
        file("src/main/c/SDL2_ttf/SDL2_ttf-${SDL2_ttf}").renameTo(file('src/main/c/SDL2_ttf/SDL2_ttf'))
        delete("src/main/c/SDL2_ttf/SDL2_ttf-${SDL2_ttf}")

        download.run {
            src "https://ftp.gnu.org/pub/gnu/libiconv/libiconv-${Iconv}.tar.gz"
            dest downloadDir
        }
        copy {
            from tarTree(resources.gzip("${downloadDir}/libiconv-${Iconv}.tar.gz"))
            into 'src/main/c/libiconv/'
        }
        delete("${downloadDir}/libiconv-${Iconv}.tar.gz")
        file("src/main/c/libiconv/libiconv-${Iconv}").renameTo(file('src/main/c/libiconv/libiconv'))
        delete("src/main/c/libiconv/libiconv-${Iconv}")
    }
}

tasks.register('copyLangs', Copy) {
    description = 'Copies langs from Instead to assets'
    from 'src/main/c/Instead/Instead/lang/'
    into 'src/main/assets/lang/'
    include '*.ini'
}

tasks.register('copyThemes', Copy) {
    description = 'Copies themes from Instead to assets'
    from 'src/main/c/Instead/Instead/themes/'
    into 'src/main/assets/themes/'
    exclude 'CMakeLists.txt', 'Makefile'
}

tasks.register('copyStead', Copy) {
    description = 'Copies stead folder from Instead to assets'
    from 'src/main/c/Instead/Instead/stead/'
    into 'src/main/assets/stead/'
    exclude '**/CMakeLists.txt', 'Makefile'
}

tasks.register('cleanAssets', Delete) {
    delete 'src/main/assets/lang/', 'src/main/assets/themes/', 'src/main/assets/stead/'
}

tasks.register('fdroidRemoveBinaries', Delete) {
    delete 'src/main/c/Instead/Instead/contrib/'
    delete 'src/main/c/SDL2/SDL2/Xcode/'
    delete 'src/main/c/SDL2_image/SDL2_image/Xcode/'
    delete 'src/main/c/SDL2_image/SDL2_image/external/libwebp-1.0.2/swig/'
    delete 'src/main/c/SDL2_mixer/SDL2_mixer/Xcode/'
    delete 'src/main/c/SDL2_ttf/SDL2_ttf/Xcode/'
    delete 'src/main/c/libiconv/libiconv/tests/'
}

preBuild.dependsOn copyLangs, copyThemes, copyStead

afterEvaluate {
    if (project.hasProperty("packageRelease")) {
        packageRelease.finalizedBy(cleanAssets)
    }
    if (project.hasProperty("packageDebug")) {
        packageDebug.finalizedBy(cleanAssets)
    }
    if (project.hasProperty("clean")) {
        clean.finalizedBy(cleanAssets)
    }
}